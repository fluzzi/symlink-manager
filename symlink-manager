#!/usr/bin/python
import os
import yaml
import argparse
import uuid

class SymLink:
    def __init__(self, home_dir, target_dir=None, file=None):
        self.home_dir = os.path.expanduser(home_dir)
        if target_dir:
            self.target_dir = os.path.abspath(target_dir) + "/"  # add trailing slash after abspath
        else:
            self.target_dir = None
        self.script_dir = os.path.dirname(os.path.abspath(__file__))
        if file:
            full_file_path = os.path.abspath(file)
            self.output_dir = os.path.dirname(full_file_path)
            self.output_file = full_file_path
        else:
            self.output_dir = os.path.join(self.script_dir, 'symlinks')
            self.output_file = os.path.join(self.output_dir, 'symlink.yaml')

    def get_links(self):
        # Initialize an empty dictionary
        links_dict = {}

        if not self.target_dir:
            return links_dict

        for root, dirs, files in os.walk(self.home_dir):
            if root.startswith(self.target_dir):
                continue
            for name in files + dirs:
                full_path = os.path.abspath(os.path.join(root, name))
                if os.path.islink(full_path):
                    link_target = os.path.abspath(os.path.join(root, os.readlink(full_path)))
                    link_target = link_target + "/" if os.path.isdir(link_target) and not link_target.endswith('/') else link_target
                    if link_target.startswith(self.target_dir):
                        # Create a new dictionary for this file with a unique id as the key
                        unique_id = str(uuid.uuid4())
                        links_dict[unique_id] = {
                            "name": name,
                            "file": link_target,
                            "link": full_path
                        }

        # Return the dictionary
        return links_dict

    def generate_yaml(self, links_dict, force, dry_run):
        
        if dry_run:
            print(f"Dry run. Would have written to: {self.output_file}")
            print(yaml.dump(links_dict))
            return
        
        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir)
        if os.path.exists(self.output_file) and not force:
            print(f"File {self.output_file} already exists. Use --force to overwrite.")
            return
        
        with open(self.output_file, 'w') as f:
            yaml.dump(links_dict, f)
        print(f"File {self.output_file} has been created.")

    def add_link(self, target, link_name):
        os.symlink(target, link_name)
        print(f"Symlink created: {link_name} -> {target}")

        if os.path.exists(self.output_file):
            with open(self.output_file, 'r') as f:
                links_dict = yaml.safe_load(f)
                if links_dict is None:   # If the file is empty, safe_load returns None
                    links_dict = {}
        else:
            if not os.path.exists(self.output_dir):
                os.makedirs(self.output_dir)
            links_dict = {}

        # Add the new link to the dictionary
        unique_id = str(uuid.uuid4())
        full_path = os.path.abspath(link_name)
        link_target = os.path.abspath(target)
        link_target = link_target + "/" if os.path.isdir(link_target) and not link_target.endswith('/') else link_target
        links_dict[unique_id] = {
            "name": os.path.basename(link_name),
            "file": link_target,
            "link": full_path
        }

        with open(self.output_file, 'w') as f:
            yaml.dump(links_dict, f)
        print(f"File {self.output_file} has been updated.")

    def remove_link(self, link_name):
        full_path = os.path.abspath(link_name)
        if not os.path.exists(full_path) or not os.path.islink(full_path):
            print(f"No symlink found at {link_name}")
            return
        os.unlink(full_path)
        print(f"Removed symlink: {link_name}")
        
        if os.path.exists(self.output_file):
            with open(self.output_file, 'r') as f:
                links_dict = yaml.safe_load(f)
                if links_dict is None:  # If the file is empty, safe_load returns None
                    links_dict = {}
        else:
            print(f"No yaml file found at {self.output_file}")
            return
        
        # Find the link in the dictionary and remove it
        for key in list(links_dict.keys()):  # Iterate over a copy of keys to safely modify the dict
            if links_dict[key]['link'] == full_path:
                del links_dict[key]
                print(f"Removed {link_name} from yaml file.")
                break
        else:
            print(f"No record found in yaml file for {link_name}")
        
        # Save back the modified dictionary
        with open(self.output_file, 'w') as f:
            yaml.dump(links_dict, f)
        print(f"File {self.output_file} has been updated.")

    def restore_links(self, dry_run=False):
        if not os.path.exists(self.output_file):
            print(f"No yaml file found at {self.output_file}")
            return

        with open(self.output_file, 'r') as f:
            links_dict = yaml.safe_load(f)
        
        if links_dict is None:  # If the file is empty, safe_load returns None
            print(f"No symlinks to restore in {self.output_file}")
            return
        
        restored_links = []
        existing_links = []
        for link in links_dict.values():
            link_path = link["link"]
            target_path = link["file"]
            
            if not os.path.exists(link_path):
                if not dry_run:
                    os.symlink(target_path, link_path)
                restored_links.append(f"{link_path} -> {target_path}")
            else:
                existing_links.append(f"{link_path} -> {target_path}")
        
        if restored_links:
            if dry_run:
                print("Dry run. Would have restored symlinks:")
            else:
                print("Restored symlinks:")
            for link in restored_links:
                print(link)

        if existing_links:
            if restored_links:
                print("")
            print("Symlinks already exist:")
            for link in existing_links:
                print(link)

# Argument parsing
parser = argparse.ArgumentParser(description='Manage symbolic links.')
subparsers = parser.add_subparsers(dest='command', help='sub-command help')

# Parent parser for common arguments
parent_parser = argparse.ArgumentParser(add_help=False)
parent_parser.add_argument('--file', help='Specify a different yaml file.')

# Gather command
gather_parser = subparsers.add_parser('gather', parents=[parent_parser], help='Gather existing symbolic links and save to yaml file.')
gather_parser.add_argument('--home_dir', default='~', help='Directory to start search from. Defaults to home directory.')
gather_parser.add_argument('--target_dir', required=True, help='Target directory to find symbolic links for.')
gather_parser.add_argument('-f', '--force', action='store_true', help='Overwrite symlink.yaml if it exists.')
gather_parser.add_argument('--dry-run', action='store_true', help='Show what would be done without actually doing it.')

# Add command
add_parser = subparsers.add_parser('add', parents=[parent_parser], help='Create a new symbolic link and add to the yaml file.')
add_parser.add_argument('TARGET', help='The target of the symlink.')
add_parser.add_argument('LINK_NAME', help='The name of the symlink.')

# Remove command
remove_parser = subparsers.add_parser('remove', parents=[parent_parser], help='Remove a symbolic link and remove it from the yaml file.')
remove_parser.add_argument('LINK_NAME', help='The name of the symlink.')

# Restore command
restore_parser = subparsers.add_parser('restore', parents=[parent_parser], help='Restore symbolic links from the yaml file.')
restore_parser.add_argument('--dry-run', action='store_true', help='Show what would be done without actually doing it.')

args = parser.parse_args()

# Check if a command has been provided
if not args.command:
    parser.print_help()
    exit(1)

# Use the class
sym_link = SymLink(args.home_dir if hasattr(args, 'home_dir') else '~', 
                   args.target_dir if hasattr(args, 'target_dir') else None, 
                   args.file if hasattr(args, 'file') else None)

if args.command == 'gather':
    links_dict = sym_link.get_links()
    sym_link.generate_yaml(links_dict, args.force, args.dry_run)
elif args.command == 'add':
    sym_link.add_link(args.TARGET, args.LINK_NAME)
elif args.command == 'remove':
    sym_link.remove_link(args.LINK_NAME)
elif args.command == 'restore':
    sym_link.restore_links(args.dry_run)
